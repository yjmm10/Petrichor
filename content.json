{"meta":{"title":"Petrichor","subtitle":null,"description":null,"author":"Petrichor","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-10-29T01:14:21.000Z","updated":"2019-10-29T01:17:46.667Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-10-29T01:14:07.000Z","updated":"2019-10-29T01:15:30.904Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"机器学习教程汇总帖(持续更新)","slug":"机器学习教程汇总帖-持续更新","date":"2019-10-31T08:16:05.000Z","updated":"2019-10-31T08:20:39.073Z","comments":true,"path":"2019/10/31/机器学习教程汇总帖-持续更新/","link":"","permalink":"http://yoursite.com/2019/10/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%E6%B1%87%E6%80%BB%E5%B8%96-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/","excerpt":"","text":"Github 资源 机器学习教程 简介：机器学习 - MachineLearning - ML、深度学习 - DeepLearning - DL、自然语言处理 NLP 博客教程：http://ailearning.apachecn.org/","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"资源","slug":"资源","permalink":"http://yoursite.com/tags/%E8%B5%84%E6%BA%90/"}]},{"title":"windows编程命令","slug":"windows编程命令","date":"2019-10-31T08:16:05.000Z","updated":"2019-10-31T12:16:11.052Z","comments":true,"path":"2019/10/31/windows编程命令/","link":"","permalink":"http://yoursite.com/2019/10/31/windows%E7%BC%96%E7%A8%8B%E5%91%BD%E4%BB%A4/","excerpt":"","text":"指令常用类型12345678910111213141516171819202122CHAR = char //8位字符WCHAR = wchar_t //16位字符DWORD = unsigned longTCHAR = WCHARTBYTE = WCHAR//8位指针PCHAR = *CHAR //P = POINT指针PSTR = *CHAR PTBYTE = *CHARPCSTR = CONST CHAR* //C =CONST常量//16位指针PTSTR = *WCHAR;PWCHAR = *WCHAR //P = POINT指针PWSTR = *WCHAR PCWSTR = CONST WCHAR* //C =CONST常量//封装后_tcslen 返回Unicode长度 更多常见 1234567891011121314151617181920212223242526272829303132333435363738394041424344typedef char CHAR; typedef short SHORT;typedef long LONG;typedef int INT;typedef WCHAR *PWCHAR, *LPWCH, *PWCH;typedef CONST WCHAR *LPCWCH, *PCWCH;typedef _Null_terminated_ WCHAR *NWPSTR, *LPWSTR, *PWSTR;typedef _Null_terminated_ PWSTR *PZPWSTR;typedef _Null_terminated_ CONST PWSTR *PCZPWSTR;typedef _Null_terminated_ WCHAR UNALIGNED *LPUWSTR, *PUWSTR;typedef _Null_terminated_ CONST WCHAR *LPCWSTR, *PCWSTR;typedef _Null_terminated_ PCWSTR *PZPCWSTR;typedef _Null_terminated_ CONST PCWSTR *PCZPCWSTR;typedef _Null_terminated_ CONST WCHAR UNALIGNED *LPCUWSTR, *PCUWSTR;typedef _NullNull_terminated_ WCHAR *PZZWSTR;typedef _NullNull_terminated_ CONST WCHAR *PCZZWSTR;typedef _NullNull_terminated_ WCHAR UNALIGNED *PUZZWSTR;typedef _NullNull_terminated_ CONST WCHAR UNALIGNED *PCUZZWSTR;typedef WCHAR *PNZWCH;typedef CONST WCHAR *PCNZWCH;typedef WCHAR UNALIGNED *PUNZWCH;typedef CONST WCHAR UNALIGNED *PCUNZWCH;typedef CONST WCHAR *LPCWCHAR, *PCWCHAR;typedef CONST WCHAR UNALIGNED *LPCUWCHAR, *PCUWCHAR;typedef unsigned long UCSCHAR;typedef UCSCHAR *PUCSCHAR;typedef const UCSCHAR *PCUCSCHAR;typedef UCSCHAR *PUCSSTR;typedef UCSCHAR UNALIGNED *PUUCSSTR;typedef const UCSCHAR *PCUCSSTR;typedef const UCSCHAR UNALIGNED *PCUUCSSTR;typedef UCSCHAR UNALIGNED *PUUCSCHAR;typedef const UCSCHAR UNALIGNED *PCUUCSCHAR; 小细节 typedef __nullterminated WCHAR NWPSTR, *LPWSTR, *PWSTR; *__nullterminated：** 头部注释。 更多信息，查阅Header Annotations 尽量用Unicode开发，效率高，ANSI的慢慢弱化 dll开发，尽量有ANSI版本（函数带A）以及Unicode版本（函数带W） 将文本字符串当作是字符数组 用TCHAR/PTSTR表示字符，字符串 用BYTE/PBYTE表示字节、字节指针、数据缓冲区 TEXT/_T表示常量字符和字符串 缓冲区大小_countof(szBuffer)代替sizeof(szBuffer) 内存以字节分配，malloc(nCharacters * sizeof(TCHAR))易错：用宏定义避免-&gt; #define chmalloc(nCharacters) (TCHAR*)malloc(nCharacters * sizeof(TCHAR)) 文件处理函数 CreateFileMapping：创建一个文件映射内核对象 12345678HANDLE CreateFileMapping(HANDLE hFile, //物理文件句柄LPSECURITY_ATTRIBUTES lpAttributes, //安全设置DWORD flProtect, //保护设置DWORD dwMaximumSizeHigh, //高位文件大小DWORD dwMaximumSizeLow, //低位文件大小LPCTSTR lpName //共享内存名称); MapViewOfFile: 映射到当前进程的虚拟地址上12345678LPVOID MapViewOfFile(HANDLE hFileMappingObject, // file-mapping object to map into // address spaceDWORD dwDesiredAccess, // access modeDWORD dwFileOffsetHigh, // high-order 32 bits of file offsetDWORD dwFileOffsetLow, // low-order 32 bits of file offsetDWORD dwNumberOfBytesToMap // number of bytes to map); GetModuleFileName:获取当前进程已加载模块的文件的完整路径，该模块必须由当前进程加载。 12345DWORD WINAPI GetModuleFileName(_In_opt_ HMODULE hModule, //应用程序或DLL实例句柄,NULL则为获取当前程序可执行文件路径名_Out_ LPTSTR lpFilename, //接收路径的字符串缓冲区_In_ DWORD nSize //接收路径的字符缓冲区的大小); GetCurrentProcessId:获取当前进程id 1GetCurrentProcessId(); dllhook相关函数 GetModuleHandleA: 获取应用程序或dll的模块句柄 123HMODULE WINAPI GetModuleHandle(_In_opt_LPCTSTR lpModuleName //模块名称); GetProcAddress: 检索指定的动态链接库(DLL)中的输出库函数地址 1234FARPROC GetProcAddress(HMODULE hModule, // DLL模块句柄LPCSTR lpProcName // 函数名); InitializeCriticalSection: 初始化临界资源对象 123VOID InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection // 临界资源对象指针); GetSystemDirectory: 获取系统完整目录 1234UINT WINAPI GetSystemDirectory(__out LPTSTR lpBuffer, //路径缓冲区__in UINT uSize //缓冲区大小);","categories":[{"name":"Windows","slug":"Windows","permalink":"http://yoursite.com/categories/Windows/"}],"tags":[{"name":"Windows API","slug":"Windows-API","permalink":"http://yoursite.com/tags/Windows-API/"}]},{"title":"hexo next美化配置","slug":"hexo-next美化配置","date":"2019-10-29T05:36:50.000Z","updated":"2019-10-29T12:29:46.362Z","comments":true,"path":"2019/10/29/hexo-next美化配置/","link":"","permalink":"http://yoursite.com/2019/10/29/hexo-next%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/","excerpt":"","text":"default 1. success fork me on github代码获取：图标、文字配置：复制的代码需要的样式到themes/next/layout/_layout.swig文件中(放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;的下面)，并把href改为你的github地址 动态背景 修改_layout.swig打开/next/layout/_layout.swig在L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});内添加代码 123&#123;% if theme.canvas_nest %&#125;color=\"0,0,255\" opacity='0.7' zIndex=\"-2\" count=\"99\" &lt;script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"&gt;&lt;/script&gt;&#123;% endif %&#125; 修改配置文件打开/next/_config.yml,将canvas_nest:false改为canvas_nest:true(利用搜索) 自定义参数 color: 线条颜色, 默认: ‘0,0,0’；三个数字分别为(R,G,B) opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 精简，搭配3在根目录下执行如下命令：$ git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest然后在主题配置文件中设置 canvas_nest: true 即可。 点击效果(未试验) 链接样式修改themes\\next\\source\\css\\_common\\components\\post\\post.styl,在末尾添加css样式 123456789101112131415161718192021222324252627 // 文章内链接文本样式 .post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125; &#125; ``` 其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。- 标签logo 修改`/themes/next/_config.yml`,搜索`tag_icon`，参数改为`true` - 文章阴影效果(未完成) - 访问量 1. 打开`\\themes\\next\\layout\\_partials\\footer.swig`文件,在`&lt;div class=\"copyright\" &gt;`前加上添加代码 ```css &lt;div class=\"powered-by\"&gt; &lt;i class=\"fa fa-user-md\"&gt;&lt;/i&gt;&lt;span id=\"busuanzi_container_site_uv\"&gt; 本站访客数:&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt; &lt;/span&gt; &lt;/div&gt; 在合适位置显示统计的代码，在&lt;div class=&quot;powered-by&quot;&gt;前添加代码12345&lt;div class=\"powered-by\"&gt;&lt;i class=\"fa fa-user-md\"&gt;&lt;/i&gt;&lt;span id=\"busuanzi_container_site_uv\"&gt;本站访客数:&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; 添加热度(未完成) 网站字数统计 在根目录下运行1npm install hexo-wordcount --save 在/themes/next/layout/_partials/footer.swig合适位置文件尾部加上：123456&lt;span class=\"post-meta-divider\"&gt;|&lt;/span&gt;&lt;div class=\"theme-info\"&gt;&lt;div class=\"powered-by\"&gt;&lt;/div&gt;&lt;span class=\"post-count\"&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt; 统计功能(未完成) 在根目录下运行1npm install hexo-wordcount --save 文章加密参考链接：hexo-blog-encrypt 字数统计以及阅读时间参考链接：hexo-symbols-count-time 置顶 将node_modules/hexo-generator-index/lib/generator.js内代码替换为12345678910111213141516171819202122232425262728&apos;use strict&apos;;var pagination = require(&apos;hexo-pagination&apos;);module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || &apos;page&apos;; return pagination(&apos;&apos;, posts, &#123; perPage: config.index_generator.per_page, layout: [&apos;index&apos;, &apos;archive&apos;], format: paginationDir + &apos;/%d/&apos;, data: &#123; __index: true &#125; &#125;);&#125;; 在文章中添加top,数值越大文章越靠前","categories":[{"name":"配置","slug":"配置","permalink":"http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"next","slug":"next","permalink":"http://yoursite.com/tags/next/"}]},{"title":"vs路径宏","slug":"vs路径宏","date":"2019-10-29T03:37:22.088Z","updated":"2019-10-29T03:37:22.088Z","comments":true,"path":"2019/10/29/vs路径宏/","link":"","permalink":"http://yoursite.com/2019/10/29/vs%E8%B7%AF%E5%BE%84%E5%AE%8F/","excerpt":"","text":"$(RemoteMachine)设置为“调试”属性页上“远程计算机”属性的值。有关更多信息，请参见更改用于 C/C++ 调试配置的项目设置。 $(References)以分号分隔的引用列表被添加到项目中。 $(ConfigurationName)当前项目配置的名称（例如“Debug”）。 $(PlatformName)当前项目平台的名称（例如“Win32”）。 $(Inherit)指定在由项目生成系统所撰写的命令行中，继承的属性出现的顺序。默认情况下，继承的属性出现在当前属性的末尾。 $(NoInherit)使任何将被继承的属性不被继承。若还要避免同级级别的计算，请使用 $(StopEvaluating)。使用 $(NoInherit)会导致对于同一属性忽略任何出现的 $(Inherit)。 $(StopEvaluating)立即停止计算链中宏的计算。出现在$(StopEvaluating) 之后的任何值将不出现在宏的计算值中。如果$(StopEvaluating) 在 $(Inherit) 之前，计算链中当前位置的继承值将不会连接到宏值。$(StopEvaluating)是$(NoInherit)的功能超集。 $(ParentName)包含此项目项的项的名称。该名称将是父文件夹名称或项目名称。 $(RootNameSpace)包含应用程序的命名空间（如果有）。 $(IntDir)为中间文件指定的相对于项目目录的目录路径。它解析为“中间目录”属性的值。 $(OutDir)输出文件目录的路径，相对于项目目录。这解析为“输出目录”属性的值。 $(DevEnvDir)Visual Studio .NET 的安装目录（定义形式：驱动器 + 路径）；包括尾部的反斜杠“\\”。 $(InputDir)输入文件的目录（定义形式：驱动器 + 路径）；包括尾部的反斜杠“\\”。如果该项目是输入，则此宏等效于 $(ProjectDir)。 $(InputPath)输入文件的绝对路径名（定义形式：驱动器 + 路径 + 基本名称 + 文件扩展名）。如果该项目是输入，则此宏等效于 $(ProjectPath)。 $(InputName)输入文件的基本名称。如果该项目是输入，则此宏等效于 $(ProjectName)。 $(InputFileName)输入文件的文件名（定义为基本名称 + 文件扩展名）。如果该项目是输入，则此宏等效于 $(ProjectFileName)。 $(InputExt)输入文件的文件扩展名。它在文件扩展名的前面包括“.”。如果该项目是输入，则此宏等效于 $(ProjectExt)。 $(ProjectDir)项目的目录（定义形式：驱动器 + 路径）；包括尾部的反斜杠“\\”。 $(ProjectPath)项目的绝对路径名（定义形式：驱动器 + 路径 + 基本名称 + 文件扩展名）。 $(ProjectName)项目的基本名称。 $(ProjectFileName)项目的文件名（定义为基本名称 + 文件扩展名）。 $(ProjectExt)项目的文件扩展名。它在文件扩展名的前面包括“.”。 $(SolutionDir)解决方案的目录（定义形式：驱动器 + 路径）；包括尾部的反斜杠“\\”。 $(SolutionPath)解决方案的绝对路径名（定义形式：驱动器 + 路径 + 基本名称 + 文件扩展名）。 $(SolutionName)解决方案的基本名称。 $(SolutionFileName)解决方案的文件名（定义为基本名称 + 文件扩展名）。 $(SolutionExt)解决方案的文件扩展名。它在文件扩展名的前面包括“.”。 $(TargetDir)生成的主输出文件的目录（定义形式：驱动器 + 路径）；包括尾部的反斜杠“\\”。 $(TargetPath)生成的主输出文件的绝对路径名（定义形式：驱动器 + 路径 + 基本名称 + 文件扩展名）。 $(TargetName)生成的主输出文件的基本名称。 $(TargetFileName)生成的主输出文件的文件名（定义为基本名称 + 文件扩展名）。 $(TargetExt)生成的主输出文件的文件扩展名。它在文件扩展名的前面包括“.”。 $(VSInstallDir)安装 Visual Studio .NET 的目录。 $(VCInstallDir)安装 Visual C++ .NET 的目录。 $(FrameworkDir)安装 .NET Framework 的目录。 $(FrameworkVersion)Visual Studio 使用的 .NET Framework 版本。与 $(FrameworkDir) 相结合，就是 Visual Studio 使用的 .NET Framework 版本的完整路径。 $(FrameworkSDKDir)安装 .NET Framework SDK 的目录。.NET Framework SDK 可作为 Visual Studio .NET 的一部分安装，也可单独安装。 $(WebDeployPath)从 Web 部署根到项目输出所属于的位置的相对路径。返回与 RelativePath 相同的值。 $(WebDeployRoot)指向 位置的绝对路径。例如，c:\\inetpub\\wwwroot。 $(SafeParentName)有效名称格式的直接父级的名称。例如，窗体是 .resx 文件的父级。 $(SafeInputName)作为有效类名的文件的名称，但不包括文件扩展名。 $(SafeRootNamespace)项目向导将在其中添加代码的命名空间名称。此命名空间名称将只包含在有效的 C++ 标识符中允许的字符。 $(FxCopDir)fxcop.cmd 文件的路径。fxcop.cmd 文件不和所有的 Visual C++ 版本一起安装。","categories":[],"tags":[]},{"title":"资源整理","slug":"资源整理","date":"2019-10-28T11:15:25.302Z","updated":"2019-10-30T02:43:12.545Z","comments":true,"path":"2019/10/28/资源整理/","link":"","permalink":"http://yoursite.com/2019/10/28/%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/","excerpt":"","text":"深度学习CS231n官方笔记授权翻译总集篇发布 该课程是斯坦福大学计算机视觉实验室推出的课程。需要注意的是，目前大家说CS231n，大都指的是2016年冬季学期（一月到三月）的最新版本。 工具： Anaconda下载 Python官方文档 Python Numpy教程(支持Python2.7)对于没有Python经验的同学，这篇教程可以帮助你们快速了解Python编程环境和如何使用Python作为科学计算工具。 学习资料 DEBUGGER.wiki 记录调试教程以及各类完整教程","categories":[],"tags":[]},{"title":"调试工具","slug":"调试工具","date":"2019-10-28T06:27:52.451Z","updated":"2019-10-28T07:24:27.797Z","comments":true,"path":"2019/10/28/调试工具/","link":"","permalink":"http://yoursite.com/2019/10/28/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/","excerpt":"","text":"API Monitor官网：http://www.rohitab.com/apimonitor简介：对某个dll在某个软件中调用的函数追踪 Dependency Walker官网：http://www.dependencywalker.com/简介：对dll的函数进行分析","categories":[],"tags":[]},{"title":"Github开源项目","slug":"Github开源项目","date":"2019-10-28T02:05:10.914Z","updated":"2019-10-28T02:07:56.427Z","comments":true,"path":"2019/10/28/Github开源项目/","link":"","permalink":"http://yoursite.com/2019/10/28/Github%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"auto.js 开源项目 地址：https://github.com/hyb1996/Auto.js简介:一个支持无障碍服务的Android平台上的JavaScript IDE，其发展目标是JsBox和Workflow。同时有VS Code 插件可提供基础的在桌面开发的功能。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-10-24T09:23:32.631Z","updated":"2019-10-29T02:49:16.728Z","comments":true,"path":"2019/10/24/hello-world/","link":"","permalink":"http://yoursite.com/2019/10/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Hexo 入门完全教程","slug":"hexo教程","date":"2019-10-24T06:39:16.000Z","updated":"2019-10-29T03:37:22.087Z","comments":true,"path":"2019/10/24/hexo教程/","link":"","permalink":"http://yoursite.com/2019/10/24/hexo%E6%95%99%E7%A8%8B/","excerpt":"","text":"官方资料 next配置文档 git安装配置 流程：配置github信息 -&gt; 生成rsa文件 -&gt; 添加SSH 配置用户信息 $ git config --global user.name &quot;yjmm10 $ git config --global user.email yjmm10@yeah.net 注:yjmm10@yeah.net 不加引号 查看用户名和密码 git config user.name git config user.email 生成rsa文件 查看rsa文件 cd ~/.ssh ls注：存在则跳过该步骤 创建rsa文件 $ ssh-keygen -t rsa -C yjmm10@yeah.net 得到id_rsa和id_rsa.pub 两个文件 复制ssh 5.将ssh添加到github上面","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"知识图谱","slug":"知识图谱","date":"2019-10-24T06:39:16.000Z","updated":"2019-10-31T12:11:38.560Z","comments":true,"path":"2019/10/24/知识图谱/","link":"","permalink":"http://yoursite.com/2019/10/24/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/","excerpt":"Windows 内核windows hook技术 Windows Hook原理与实现 目录 概述 Hook分类 消息Hook 技术原理 代码实现 调试Hook 技术原理 代码实现 注入Hook IAT Hook 技术原理 代码实现 Inline Hook 技术原理 代码实现 HotFix Hook 技术原理 代码实现 SSDT Hook SSDT 原理 SSDT Hook","text":"Windows 内核windows hook技术 Windows Hook原理与实现 目录 概述 Hook分类 消息Hook 技术原理 代码实现 调试Hook 技术原理 代码实现 注入Hook IAT Hook 技术原理 代码实现 Inline Hook 技术原理 代码实现 HotFix Hook 技术原理 代码实现 SSDT Hook SSDT 原理 SSDT Hook 逆向实用干货分享,Hook技术第一讲,之Hook Windows API调试Hook WriteFile() API 钩取 注入HookIAT Hook IAT HOOK IAT Hook代码 可用 SSDT hook 进程隐藏与进程保护（SSDT Hook 实现） 逆向深度学习 Python","categories":[{"name":"资源","slug":"资源","permalink":"http://yoursite.com/categories/%E8%B5%84%E6%BA%90/"}],"tags":[{"name":"windows hook","slug":"windows-hook","permalink":"http://yoursite.com/tags/windows-hook/"},{"name":"deeplearning","slug":"deeplearning","permalink":"http://yoursite.com/tags/deeplearning/"}]}]}